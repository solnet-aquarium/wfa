

// #######################################################
// Typography

//Set a rem font size with pixel fallback
@function calculateRem($size) {
  $remSize: $size / 10;
  @return $remSize * 1rem;
}

@mixin font-size($size) {
  font-size: $size * 1px;
  font-size: calculateRem($size);
}

// Body copy
@mixin body-copy() {
  color: $body-copy;
  font-family: "Fira Sans",Helvetica,Arial,sans-serif;
  @include font-size(14);
  font-weight: 300;
}


//Importing fonts
//
//// =============================================================================
// Font Face
// =============================================================================
//Ref:  https://gist.github.com/jonathantneal/d0460e5c2d5d7f9bc5e6
//
$font-path-prefix : "../fonts/";
//
@mixin font-face($name, $path, $weight: null, $style: null, $exts: eot woff2 woff ttf svg) {
  $src: null;

  $extmods: (
    eot: "?",
    svg: "#" + str-replace($name, " ", "_")
  );

  $formats: (
    otf: "opentype",
    ttf: "truetype"
  );

  @each $ext in $exts {
    $extmod: if(map-has-key($extmods, $ext), $ext + map-get($extmods, $ext), $ext);
    $format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);
    $src: append($src, url(quote($font-path-prefix + $path + "." + $extmod)) format(quote($format)), comma);
  }

  @font-face {
    font-family: quote($name);
    font-style: $style;
    font-weight: $weight;
    src: $src;
  }
}


// #######################################################
// Style elements
// 




//Cross browser opacity
@mixin opacity($opacity) {
  opacity: $opacity;
  $opacity-ie: $opacity * 100;
  filter: alpha(opacity=$opacity-ie); //IE8
}

// Visually hide an element
.visuallyhidden {
  margin: -1px;
  padding: 0;
  width: 1px;
  height: 1px;
  overflow: hidden;
  clip: rect(0 0 0 0);
  clip: rect(0, 0, 0, 0);
  position: absolute;
}

//useage:
//.visually-hidden {
//   @extend .visuallyhidden;
// }


// Style placeholder text
@mixin placeholder-text($selectorName,$colour) {
  #{$selectorName}::-webkit-input-placeholder {
     color: $colour;
  }

  #{$selectorName}:-moz-placeholder { /* Firefox 18- */
     color: $colour; 
     opacity:  1;
  }

  #{$selectorName}::-moz-placeholder {  /* Firefox 19+ */
     color: $colour;  
     opacity:  1;
  }

  #{$selectorName}:-ms-input-placeholder {  
     color: $colour;  
  }
}

//useage:
// @include placeholder-text("input", #888);
// }


// #######################################################

// Transitions
// 


@mixin transition($args...) {
  -webkit-transition: $args;
  -moz-transition: $args;
  -ms-transition: $args;
  -o-transition: $args;
  transition: $args;
}


// #######################################################

// Transitions

@mixin transform-any($transform-string) {
  -webkit-transform: $transform-string;
      -ms-transform: $transform-string; // IE9 only
       -o-transform: $transform-string;
          transform: $transform-string;
}





// #######################################################
// A mixin to create panels in set columns. A working version can be viewed here: http://codepen.io/solnet-digital/pen/NPErgr?editors=110
// REQUIRES BOOTSTRAP GRIDS !!!!!!!!!!!!!

//function to calculate the size of the columns with gutter taken into account. All widths are percentages.
@mixin calculateCols($col-value, $screen-size-min, $screen-size-max:4000px ) {
  $gutterCount : $col-value - 1;
  $gutterSpace : $gutterCount * $column-gutter;
  $baseWidth : (100 - $gutterSpace) / $col-value;

  @media (min-width: $screen-size-min) and (max-width: $screen-size-max) { 
    width: ($baseWidth) * 1%;
    margin-right: $column-gutter * 1%;

    //Create the row breaks and take margins off last childs of each row
    @for $i from 1 through $row-count {
      $col-break-point: $col-value * $i + 1; 
      &:nth-child(#{$col-break-point}) {
        clear: left; //the introduction of a clear creates the illusion of a new row. No need to set heights of panels
      }
      &:nth-child(#{($col-break-point - 1)}) {
        margin-right: 0 !important;
      }
    }  
  }   
}




// #######################################################
// Set helper margins 

$margin-map: (
'none'        : 0,  
'xs'          : $margin-xs,
'sm'          : $margin-sm,
'md'          : $margin-md,
'lg'          : $margin-lg,
'xl'          : $margin-xl
);



@mixin set-margin ($selector) {
    @each $name, $margin-value in $margin-map {
        .margin-#{$selector}-#{$name} {
            margin-#{$selector}: $margin-value;
        }
    }
    @media (min-width: $screen-sm) { 
      @each $name, $margin-value in $margin-map {
        .margin-#{$selector}-#{$name} {
            margin-#{$selector}: $margin-value * $margin-modifier;
        }
      }
    }
    @media (min-width: $screen-md) { 
      @each $name, $margin-value in $margin-map {
        .margin-#{$selector}-#{$name} {
            margin-#{$selector}: $margin-value * ($margin-modifier * $margin-modifier);
        }
      }
    }
    @media (min-width: $screen-lg) { 
      @each $name, $margin-value in $margin-map {
        .margin-#{$selector}-#{$name} {
            margin-#{$selector}: $margin-value * ($margin-modifier * $margin-modifier * $margin-modifier);
        }
      }
    }

}

@mixin set-multi-margins () {
    @each $name, $margin-value in $margin-map {
      .margin-vertical-#{$name} {
          margin-top: $margin-value;
          margin-bottom: $margin-value;
      }
      .margin-horizontal-#{$name} {
          margin-left: $margin-value;
          margin-right: $margin-value;
      }
    }
    @media (min-width: $screen-sm) {
      @each $name, $margin-value in $margin-map {
        .margin-vertical-#{$name} {
            margin-top: $margin-value * ($margin-modifier);
            margin-bottom: $margin-value * ($margin-modifier);
        }
        .margin-horizontal-#{$name} {
            margin-left: $margin-value * ($margin-modifier);
            margin-right: $margin-value * ($margin-modifier);
        }
      }
    }
    @media (min-width: $screen-md) {
      @each $name, $margin-value in $margin-map {
        .margin-vertical-#{$name} {
            margin-top: $margin-value * ($margin-modifier * $margin-modifier);
            margin-bottom: $margin-value * ($margin-modifier * $margin-modifier);
        }
        .margin-horizontal-#{$name} {
            margin-left: $margin-value * ($margin-modifier * $margin-modifier);
            margin-right: $margin-value * ($margin-modifier * $margin-modifier);
        }
      }
    }
    @media (min-width: $screen-lg) {
      @each $name, $margin-value in $margin-map {
        .margin-vertical-#{$name} {
            margin-top: $margin-value * ($margin-modifier * $margin-modifier * $margin-modifier);
            margin-bottom: $margin-value * ($margin-modifier * $margin-modifier * $margin-modifier);
        }
        .margin-horizontal-#{$name} {
            margin-left: $margin-value * ($margin-modifier * $margin-modifier * $margin-modifier);
            margin-right: $margin-value * ($margin-modifier * $margin-modifier * $margin-modifier);
        }
      }
    }
}



// #######################################################
/* This mixin creates an arrow as an inline element. Any spacing or placement will have to be further defined */
// Example of it's usage: http://codepen.io/solnet-digital/pen/FEgex?editors=110



@mixin nav-arrow ($arrow-direction: left, $arrow-width: 6px, $arrow-height: 12px, $arrow-stroke: 1px, $arrow-colour: black, $arrow-mask-colour: white, $arrow-hover: #aaa) {
  
  /* set up default selectors for left arrow */
  $border-transparent1 : border-top;
  $border-transparent2 : border-bottom;
  $border-arrow : border-right;
  $border-arrow-point: border-left;
  /* if it's another direction, reset the variables */
  @if $arrow-direction == right {
      $border-transparent1 : border-top;
      $border-transparent2 : border-bottom;
      $border-arrow : border-left;
      $border-arrow-point: border-right;
    
  } @else if $arrow-direction == up {
      $border-transparent1 : border-left;
      $border-transparent2 : border-right;
      $border-arrow : border-bottom;
      $border-arrow-point: border-top;
    
  } @else if $arrow-direction == down {
      $border-transparent1 : border-left;
      $border-transparent2 : border-right;
      $border-arrow : border-top;
      $border-arrow-point: border-bottom;
  }
  
  /* assign values to selectors depending on arrow orientation */ 
  @if $arrow-direction == up or $arrow-direction == down {
    #{$border-transparent1}: $arrow-width solid transparent;
    #{$border-transparent2}: $arrow-width solid transparent;
    #{$border-arrow}: $arrow-height solid $arrow-colour;
    #{$border-arrow-point}: none;
  } @else {
    #{$border-transparent1}: $arrow-height solid transparent;
    #{$border-transparent2}: $arrow-height solid transparent;
    #{$border-arrow}: $arrow-width solid $arrow-colour;
    #{$border-arrow-point}: none;
  }
  background-color: transparent; /* in case it's used on a button */
  display: inline-block;
  padding: 0;
  width: 0;
  height: 0; 
  position: relative;
  vertical-align: middle;

  &:after {
    content: "";
    display: block;
    width: 0;
    height: 0;
    @if $arrow-direction == up or $arrow-direction == down {
      #{$border-transparent1}: $arrow-width solid transparent;
      #{$border-transparent2}: $arrow-width solid transparent;
      #{$border-arrow}: $arrow-height solid $arrow-mask-colour;
    } @else {
      #{$border-transparent1}: $arrow-height solid transparent;
      #{$border-transparent2}: $arrow-height solid transparent;
      #{$border-arrow}: $arrow-width solid $arrow-mask-colour;
    }
    position: absolute;
    
    @if $arrow-direction == left {
      left: $arrow-stroke;
      top: ($arrow-height * -1); /*Invert the value to offset from centre*/
    } @else if $arrow-direction == right {
      left: ($arrow-width* -1) - $arrow-stroke;
      top: ($arrow-height * -1); /*Invert the value to offset from centre*/
    } @else if $arrow-direction == up {
      left: ($arrow-width * -1);
      top: $arrow-stroke; 
    } @else if $arrow-direction == down {
      left: ($arrow-width * -1);
      top: ($arrow-height * -1) - $arrow-stroke; 
    }
  }
  &:hover {
    @if $arrow-direction == up or $arrow-direction == down {
      #{$border-arrow}: $arrow-height solid $arrow-hover;  
    } @else {
      #{$border-arrow}: $arrow-width solid $arrow-hover;  
    }
    cursor: pointer;
  }
}


// FLEX BOX MIXINS
// 
@mixin flexbox() {
  display: -webkit-flexbox;
  display: -webkit-flex;
  display: -moz-box;
  display: -ms-flexbox;
  display: flex
}

@mixin flex-direction($value:row) {
   -webkit-flex-direction: $value;
   flex-direction: $value;
}

@mixin flex-wrap($value:wrap) {
   -webkit-flex-wrap: $value;
   flex-wrap: $value;
}

@mixin flex($values) {
  -webkit-box-flex: $values;
  -moz-box-flex:  $values;
  -webkit-flex:  $values;
  -ms-flex:  $values;
  flex:  $values;
}

@mixin order($val) {
  -webkit-box-ordinal-group: $val;  
  -moz-box-ordinal-group: $val;     
  -ms-flex-order: $val;     
  -webkit-order: $val;  
  order: $val;
}



